容器技术，又称为容器虚拟化，是一种操作系统级虚拟化，属于轻量级的虚拟化技术。
一般来说，容器技术主要包括Namespace和Cgroup这两个内核特性。
Namespace又称为命名空间
它主要做访问隔离。其原理是针对一类资源进行抽象，并将其封装在一起提供给一个容器使用，对于这类资源，因为每个容器都有自己的抽象，而他们彼此之间是不可见的，所以就可以做到访问隔离。
Cgroup又称为控制组
它主要是做资源控制。其原理是将一组进程放在一个控制组里，通过给这个控制组分配指定的可用资源，达到控制这一组进程可用资源的目的。
Docker是基于Go语言实现的云开源项目。
Docker是一个用于开发，交付和运行应用程序的开放平台。Docker使开发者能够将应用程序与基础架构分开，从而可以快速交付软件。
借助Docker，我们可以以与管理应用程序相同的方式来管理基础架构。
通过利用Docker的快速交付，测试和部署代码的方法，我们可以大大减少编写代码和在生产环境中运行代码之间的延迟。
Docker提供了在松散隔离的环境（称为容器）中打包和运行应用程序的功能。
Docker 是 PaaS 提供商 dotCloud 开源的高级容器引擎，源代码托管在 Github上, 基于go语言，并遵从Apache2.0协议开源。
dotCloud公司后来也改名为Docker Inc，专注于Docker相关技术和产品的开发。
容器是轻量级的，因为它们不需要管理程序的额外负担，而是直接在主机的内核中运行。
Docker Engine是具有以下主要组件的客户端-服务器应用程序：
 1.服务器是一种长期运行的程序，称为守护程序进程（ dockerd命令）。
 2.REST API，它指定程序可以用来与守护程序进行通信并指示其操作的接口。
 3.命令行界面（CLI）客户端（docker命令）。
1.Docker daemon//docker服务器
Docker daemon（dockerd）侦听Docker API请求并管理Docker对象。Docker daemon还可以与其他daemon通信以管理 Docker服务。接收客户端发送过来的命令，进行业务处理。
2. Docker client//docker客户端
Docker CLi（docker）是许多Docker用户与Docker交互的主要方式。提供了很多的docker命令。当用户使用Docker命令时，客户端会将这些命令发送到dockerd，由dockerd执行这些命令。Docker客户端可以与多个Docker daemon通信。
3.REST API：指定程序可以用来与守护程序进行通信并指示其操作的接口。

总结：CLI使用Docker REST API通过脚本或直接CLI命令控制或与Docker守护程序交互。许多其他Docker应用程序都使用基础API和CLI。
守护程序创建和管理Docker对象，例如图像，容器，网络和卷。
Docker使用客户端-服务器架构。
Docker客户端与Docker守护进程进行对话，该守护进程完成了构建，运行和分发Docker容器的繁重工作。
Docker客户端和守护程序可以在同一系统上运行，或者您可以将Docker客户端连接到远程Docker守护程序。Docker客户端和守护程序在UNIX套接字或网络接口上使用REST API进行通信。
Docker三大核心概念：1.Docker镜像.2Docker容器.3.Docker 仓库
1.Docker镜像1.ID：每一层都有一个ID，作为该层的唯一标识。
            2.元数据：它不仅能够让Docker获取运行和构建时的信息，还包括父层的层次信息，只读层和读写层都包含元数据。
            3.指针：除了最底层外的每一层都包括一个指向父层的指针。
2.Docker容器容器就是从镜像启动的时候，在镜像的最上层创建一个可写层。
容器 = 镜像 + 读写层。
3.Docker仓库仓库是集中存放镜像和管理镜像文件的场所。
仓库注册服务器上往往存放着多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签。当前最大的仓库注册服务器是Docker Hub：https://hub.docker.com/。

仓库分为公开仓库（Public）和私有仓库（Private）两种形式。
push 镜像到仓库,从仓库pull下镜像。默认是从Docker Hub仓库拉取。
1.docker管理命令
docker --help查看docker的帮助文档
docker vesion查看docker的版本号
docker info查看docker的初始化信息
docker image --help
COMMAND：
	build       通过Dockerfile构建镜像（在Dockerfile章节中详细讲解）
	history     显示镜像的历史信息
	import      从一个操作系统模板文件导入一个镜像
  	inspect     显示一个或多个镜像的详细信息
  	load         将保存到本地的镜像压缩文件加载成镜像
 	ls             列出本地存在的镜像
	Options:
  -a, --all             列出所有（包括临时文件）镜像文件，默认为否；
      --digests       列出镜像的数字摘要值
  -f, --filter filter   过滤列出的镜像，如dangling=true只显示没有被使用的镜像；也可以指定带有特定标注的镜像等。
      --format string   控制输出格式，如.ID代表ID信息，.Repository代表仓库信息等。
      --no-trunc        对输出结果中太长的部分是否进行阶段，如镜像的ID信息，默认为是。
  -q, --quiet           仅输出ID信息，默认为否。
  -o, --output string   导出镜像到指定文件中，而不是STDOU。 

  	prune      删除没有使用的镜像
  	pull         从镜像仓库拉取镜像
 	push        推送镜像到镜像仓库（在仓库管理小节中讲解）
  	rm           删除一个或多个镜像
  	save         以tar压缩文件的格式将镜像保存到本地
  	tag          为镜像添加一个新的镜像标签
docker search --help
搜索官方提供的Nginx镜像：
docker search -f "is-official=true" nginx
搜索是否是使用自动构建的Nginx镜像：
$ docker search --filter "is-automated=true" nginx
搜索所有收藏数超过4的关键词包括tensorflow镜像：
$ docker search --filter "stars=4" tensorflow
搜索tensorflow镜像，限制输出搜索个数为5：
$ docker search --limit 5 tensorflow
docker仓库管理
docker container create [OPTIONS] IMAGE [COMMAND] [ARG...] 
常用Options:
  -e, --env list     指定容器内环境变量（创建容器时，为容器创建参数）。
  -h, --hostname string  指定容器内的主机名
  --name string       指定容器的别名
  -p, --publish list  指定如何映射到本地主机端口（将容器的端口映射给主机）
  --restart string    容器的重启策略，默认为no，always表示永远启动。还包               
                            括unless-stopped、on-failure
  -i, --interactive   保持标准输入打开，默认为false
  -t, --tty           是否分配一个伪终端，默认为false
  -v, --volume list   挂载主机上的文件卷到容器内（数据卷章节中讲解）
 --network network    将容器链接到指定的网络（后续网络章节讲解）
Docker容器数据持续化
默认情况下
默认情况下，在容器内创建的所有文件都存储在可写容器层中：
1）当该容器不再运行时，数据不会持久存在，如果另一个进程需要，则很难从容器中获取数据。
2）容器的可写层紧密耦合到运行容器的主机，无法进行数据迁移。
3）写入容器的可写层需要存储驱动程序来管理文件系统。存储驱动程序使用Linux内核提供联合文件系统。与使用直接写入主机文件系统的数据卷相比，这种额外的抽象降低了性能。
在生产环境中使用Docker。往往需要对数据进行持久化，或者需要在多个容器之间进行数据共享，这就是容器数据管理操作。
Docker容器的数据管理主要方式：
Docker为容器提供了两个选项来将文件存储在主机中，以便容器停止后文件也可以持久存储：volumes（数据卷） 和 Bind mounts（绑定挂载）。如果在Linux上运行Docker，则可以使用tmpfs mount（临时文件系统挂载）。

